from celery_async import app as celery_app
from django_redis import get_redis_connection
import ast
from datetime import datetime
from .models import Product
from .utils import PopularityCheck
from supplier.models import Metrics
import json
from .serializers import ProductSerializer

@celery_app.task
def do_popularity_check():
    
    redis_client = get_redis_connection('default')
    popular_list = redis_client.lrange('popular', 0, -1)
    
    #product_id = product.id

    # pass threshold percentage values from redis cache to the first function
    #+ add kwargs to the next function that holds threshold values for various
    #+ timeframes
    #+ the last one is for conversion arguements that we will get from redis
    # certain elements of the list should be removed based on timestamp

    percentage = redis_client.hgetall('purchase_percentage_thresholds', subcategory)
    popularity_check = PopularityCheck(subcategory)
    popular = popularity_check.find_popular()
 
    if popular: # This is supposed to serialize the product and store it in redis
        if redis_client.rpush('popular', prod_obj.id):
            return (True, f"{prod_obj.id} has been added to popular products cache")
        else:
            return (False, f"couldn't add {prob_obj.id} to popular products cache")
    return (False, "{product_id} not popular")
